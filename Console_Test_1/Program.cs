using System;
using Types;

namespace Test_1
{

    // 1) Что такое управляемый/неуправляемый код?
    // Управляемый код пишется на языке програмирования
    // не управляемый код - машинный код
    //2) Опишите устройство памяти в С#.
    //    Stack - это область оперативной памяти, которая создаётся для каждого потока. ПринципLast In, First Out.
    //    Heap - это хранилище памяти, также расположенное в ОЗУ, которое допускает динамическое выделение памяти.
    //3) Какие есть типы данных в C# и как они хранятся в памяти?
    //    Stack: Целочисленные типы(byte, sbyte, short, ushort, int, uint, long, ulong)
    //            Типы с плавающей запятой(float, double)
    //            Тип decimal
    //            Тип bool
    //            Тип char
    //            Перечисления enum
    //            Структуры (struct)
    //    Heap: Ссылочные типы: Тип object
    //          Тип string
    //            Классы(class)
    //         Интерфейсы(interface)
    //        Делегаты(delegate)
    //4)Что такое явное/неявное преобразование типов? Приведите пример.
    //    неявное преобразование происходит автоматически, если потеря данных невозможна
    //    short value = 12;
    //    int valueInt = Value;
    //    Явное происходит после того, как пользователь явно укажет тип, в который он(она) хочет преобразовать
    //    (риск потери данных)
    //    int value = 20;
    //    short valueShort = (short)value;
    //5) Что такое операция упаковки/распаковки? Приведите пример этих операций.
    //    Упаковка и распаковка значимых типов в C# — доступный для программиста механизм преобразования размерных типов
    //    данных языка C# из значимых в ссылочные и обратно через задействование свойств фундаментального
    //    базового класса Object.
    //    int value = 123;
    //    object o = value;
    //    int secondValue = (int)o;
    //6)Чем отличается логический оператор & от &&? Приведите пример.
    //    Побитовые операции работают с переменными целочисленного типа.
    //    Если логические переменные сравнивают целиком две переменные, то побитовые сравнивают биты.
    //    a = 11 (в двоичной системе счисления это 1011)
    //    b = 15 (это 1111)
    //    a & b вернет 11
    //    && - операция логическая и работает с bool.
    //7) Чем отличается цикл while от do-while?
    //    цикл do-while сразу выполняется, затем проверяет условия(т.е выполнится как минимум один раз)
    //    while разу проверяет условие и затем выполняется(если условие выполнено)
    //8)Объявить двумерный массив одновременно с его инициализацией?
    //    int[,] array = { { 1, 2, 3 }, { 4, 5, 6 }, { 4, 2, 5 } };
    //9) В чем отличие класса от объекта? Приведите пример класса и объекта.
    //    Класс - это некий шаблон, который предоставляет абстрактный вид любого объекта. 
    //    Объект или Экземпляр класса - это уже конкретная сущность которая сделана по шаблону класса
    //    Что бы сделать новую конкретную модель телефона, Вам нужно иметь шаблон в роли которого в 
    //    программировании выступает класс.В шаблоне указано что каждый телефон должен звонить, включаться, 
    //    выключаться и принимать звонки например.И по шаблону мы уже делаем конкретный объект который уже 
    //    что-то может изменять в себе или использовать по назначению.
    //10)Что такое финализатор?
    //    Финализа́тор -  механизм сборки мусора, — специальный метод, вызываемый средой 
    //    исполнения перед удалением объекта сборщиком мусора
    //11)Приведите пример автосвойства и во что оно разворичивается?
    //    public string Name
    //    {
    //get
    //{
    //    return name;    // возвращаем значение свойства
    //}
    //set
    //{
    //    name = value;   // устанавливаем новое значение свойства
    //}
    //  }
    //12)Поддерживает ли C# множественное наследование? Приведите пример.
    //    C# не поддерживает множественное наследование, НО поддерживает множественную реализацию интерфейсов.
    //    например тип int32
    //13)Какое преимущество использования класса StringBuilder перед String?
    //    Когда мы выполняем какой-нибудь метод класса String, система создает новый объект в памяти с 
    //    выделением ему достаточного места.
    //    StringBuilder лучше использовать при неизвестном количестве операций и изменений над строками во время 
    //    выполнения программы и когда предполагается, что приложению придется сделать множество 
    //    подобных операций
    //14) Какие существуют модификаторы доступа в С#? Опишите их назначение.
    //    public: неограниченный доступ.
    //    protected: доступ ограничен содержащим классом или типами, которые являются производными от содержащего класса.
    //    internal: доступ ограничен текущей сборкой.
    //    protected internal: Доступ ограничен текущей сборкой или типами, которые являются производными от содержащего класса.
    //    private: доступ ограничен содержащим типом.
    //    private protected: Доступ ограничен содержащим классом или типами, которые являются производными от 
    //    содержащего класса в текущей сборке.
    //15)Как можно передавать параметры методу в С#? Модификаторы параметров.
    //    Передача параметров по значению: int value = Summa(5, 3); void Summa(int x, int y) { };
    //    Передача параметров по ссылке  int value = 5; void Summa(ref int x) { }; Summa(ref value);
    //16)Что такое var? Как оно работает?
    //    var - синтаксический сахар. var всегда подразумевается ссылочный тип, допускающий значение NULL,
    //    компилятор атоматически выбирает тип данных(нельзя объявить var и не присвоить ему значение).
    //17)Перечислите основыне концепции ООП.Коротко опишите, что они означают.
    //    Абстракция — сокрытие внутренних деталей и описание вещей простыми словами.
    //    Инкапсуляция — метод достижения абстракции в объектно-ориентированном программировании.
    //    Gолиморфизм - возможность объекта вести себя по-разному в различных ситуациях.
    //    Наследование — одна из концепций объектно-ориентированного программирования, согласно которой 
    //                один объект основывается на другом объекте.
    //    Ассоциация — концепция ООП, которая определяет отношения между объектами.
    //    Агрегирование - объекты все также имеют свой жизненный цикл, однако ограничены отношением принадлежности «HAS-A».
    //    Композиция - более строгая форма агрегации. Находящийся в отношениях «HAS-A» объект не может существовать сам по себе.
    //18)Отличие abstract метода от virtual метода.
    //    абстрактные методы используются для описания методов, которые должны иметь все производные классы, 
    //    виртуальный же метод предоставляет возможность переопределить метод в производном классе.
    //19)Назовите методы класса System.Object и их назначение.
    //    ToString служит для получения строкового представления данного объекта.
    //    GetHashCode позволяет возвратить некоторое числовое значение, которое будет соответствовать данному объекту или его хэш-код.
    //    GetType позволяет получить тип данного объекта.
    //    Equals позволяет сравнить два объекта на равенство.
    //20)Что такое абстрактный класс? Коротко опишите.
    //    абстрактные классы полезны для описания некотоого общего функционала, который могут наследовать 
    //    и использовать производные классы.
    //    мы НЕ можем использовать конструктор абстрактного класса для создания экземпляра класса.
    //21)Назовите отличия между интерфейсом и абстрактным классом?
    //    Как правило, абстрактные классы фокусируются на общем состоянии классов-наследников.В то время как интерфейсы 
    //    строятся вокруг какого-либо общего действия.
    //22)Как запретить наследование от класса?
    //    когда нужно запретить наследование от некоторого класса.В многих иерархиях, классы, 
    //    которые размещены на нижних уровнях могут быть обозначены как sealed;
    //23)Перечислите ограничения обобщенных типов и их назначение.
    //    Ограничения методов указываются после списка параметров после оператора where
    //    В качестве ограничений мы можем использовать следующие типы:
    //    классы
    //    интерфейсы
    //    структура
    //    new()
    //24) Дан следующий цикл: ... 50 раз
    class Program
    {
        static void Main(string[] args)
        {
            //TODD 1
            int[,,] mass =
            {
                { {1,2}, {3,4} },
                {{4,5},{6,7} },
                {{7,8},{9,10} },
                {{10,11},{12,13} }
            };
            Console.Write("{");
            for (int i = 0; i < mass.GetLength(0); i++)
            {
                Console.Write("{");
                for (int j = 0; j < mass.GetLength(1); j++)
                {
                    for (int k = 0; k < mass.GetLength(2); k++)
                    {
                         string x = String.Format("{0},{1}", mass[i,j,k], mass[i, j, k+1]);
                        if (k == 0)
                            Console.Write("{" + x + "}");
                        break;
                    }
                }
                Console.Write("}");
            }
            Console.Write("}");
            Console.WriteLine();

            //TODD 2
            MyString test = new MyString();
            test.Value = "this string";
            Console.WriteLine(test.Value);
            Console.WriteLine(test.Revers(test.Value));

            //TODD 5
            Car car = new Car();
            car.Name = "Mercedes";
            car.Age = 3;
            car.Type = "sedan";
            car.PrintInfo();

        }
    }
}